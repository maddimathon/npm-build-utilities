{
    
    "NPM Build Stage Class": {
        "scope": "javascript,typescript",
        "prefix": [ "npm-stage", "npm-build-stage", "build-stage" ],

        "body": [
            "// import * as utils from '@maddimathon/utility-typescript';",
            "",
            "import { AbstractStage } from './abstracts/AbstractStage.js';",
            "",
            "",
            "const ${1:lowercaseStageName}SubStages = [$0",
            "] as const;",
            "",
            "",
            "export class ${2:CamelCaseStageName} extends AbstractStage<${2:CamelCaseStageName}.Stages, ${2:CamelCaseStageName}.Args> {",
            "",
            "",
            "",
            "    /* LOCAL PROPERTIES",
            "     * ====================================================================== */",
            "",
            "    public readonly subStages = ${1:lowercaseStageName}SubStages;",
            "",
            "    public get ARGS_DEFAULT() {",
            "",
            "        return {",
            "            ...AbstractStage.ARGS_ABSTRACT,",
            "        } as ${2:CamelCaseStageName}.Args;",
            "    }",
            "",
            "",
            "",
            "    /* CONSTRUCTOR",
            "     * ====================================================================== */",
            "",
            "    constructor ( args: ${2:CamelCaseStageName}.Args ) {",
            "        super( args, '${4:black}' );",
            "    }",
            "",
            "",
            "",
            "    /* LOCAL METHODS",
            "     * ====================================================================== */",
            "",
            "    protected async runSubStage( stage: ${2:CamelCaseStageName}.Stages ) {",
            "        await this[ stage ]();",
            "    }",
            "",
            "    public async startEndNotice( which: \"start\" | \"end\" ): Promise<void> {",
            "",
            "        this.startEndNoticeLog(",
            "            which,",
            "            `${3:UPPERCASESTAGENAME} ${ which.toUpperCase() }ING`,",
            "            `${3:UPPERCASESTAGENAME} FINISHED`,",
            "            `${ which.toUpperCase() }ING ${3:UPPERCASESTAGENAME}`,",
            "        );",
            "    }",
            "",
            "",
            "",
            "    /* STAGE METHODS",
            "     * ====================================================================== */",
            "}",
            "",
            "",
            "export namespace ${2:CamelCaseStageName} {",
            "",
            "    export type Args = AbstractStage.Args<${2:CamelCaseStageName}.Stages> & {",
            "    };",
            "",
            "    export type Stages = typeof ${1:lowercaseStageName}SubStages[ number ];",
            "}",
        ],
    },
}